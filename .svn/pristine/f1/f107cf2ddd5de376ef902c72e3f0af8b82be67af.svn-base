package com.healthpay.iface.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.healthpay.common.entity.ProRequest;
import com.healthpay.common.entity.ProResponse;
import com.healthpay.common.exception.BusException;
import com.healthpay.common.service.proCard.IPCardService;
import com.healthpay.common.utils.DateUtils;
import com.healthpay.iface.annotation.BsoftCustomField;
import com.healthpay.iface.util.StringUtils;
import com.healthpay.iface.vo.QueryParamVO;
import com.healthpay.iface.vo.ResResultHealthCardVo;
import com.healthpay.modules.hc.entity.HpCardholder;
import com.healthpay.modules.hc.entity.HpHealthcard;
import com.healthpay.modules.hc.entity.HpYkjlXnk;
import com.healthpay.modules.hc.service.HpHealthcardService;
import com.healthpay.modules.hc.service.HpYkjlXnkService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
* @ClassName: A1027
* @Description: 验证电子健康卡二维码
* @author mabaoying
* @date 2019年8月14日
* @最后修改人：
* @最后修改时间：
*/
@Service
public class A1027 extends EHCAbstractHandlerImpl{
	@BsoftCustomField
	QueryParamVO vo;
	@Autowired
	HpHealthcardService hpHealthcardService;
	@Autowired
	private IPCardService proCardService;
	@Autowired
	private HpYkjlXnkService hpYkjlXnkService;

	public Object doHandler(String appId,String appSecret,String realPath) throws Exception {
		ResResultHealthCardVo healthCardVo=new ResResultHealthCardVo();
		String qrCode=vo.getQrCode();//二维码密文
		String medstepCode=vo.getMedstepCode();//诊疗环节代码
		String terminalCode=vo.getTerminalCode();//扫码枪终端标识号
		String channelCode=vo.getChannelCode();//刷卡终端类型编号

		if(StringUtils.isBlank(qrCode)){
			throw new BusException("二维码数据内容不能为空!");
		}
		if(StringUtils.isBlank(medstepCode)){
			throw new BusException("诊疗环节代码不能为空!");
		}
		if(StringUtils.isBlank(terminalCode)){
			throw new BusException("扫码枪终端标识号不能为空!");
		}
		if(StringUtils.isBlank(channelCode)){
			throw new BusException("刷卡终端类型编号不能为空!");
		}
		if(qrCode.indexOf(":")==-1){
			throw new BusException("二维码错误!");
		}

		try{
			logger.info("本地验证电子健康卡二维码");
			String healthCardId = qrCode.substring(0,qrCode.indexOf(":")); // 获得电子健康卡ID
			//本地卡管查询电子健康卡记录,若不存在，再从省卡管查询
			HpHealthcard hpHealthcard = hpHealthcardService.getByPkidAndStatus(healthCardId,"2");
			if(null!=hpHealthcard){
				//查询持卡人信息
				HpCardholder hpCardholder = hpCardholderService.get(hpHealthcard.getIdentityId());
				//封装响应参数
				healthCardVo.setHealthCardId(healthCardId);
				healthCardVo.setMindexId(hpHealthcard.getCardId());
				healthCardVo.setDocuType(hpCardholder.getDocuType());
				healthCardVo.setDocuId(hpCardholder.getDocuId());
				healthCardVo.setName(hpCardholder.getName());
				healthCardVo.setSex(String.valueOf(hpCardholder.getSex()));
				healthCardVo.setNation(hpCardholder.getNation());
				healthCardVo.setNationality(hpCardholder.getNationality());
				healthCardVo.setAddress(hpCardholder.getAddress());
				healthCardVo.setBirth(hpCardholder.getBirth());
				healthCardVo.setPhone(hpCardholder.getPhone());
				healthCardVo.setTel(hpCardholder.getTel());
				healthCardVo.setAddress2(hpCardholder.getAddress2());
				healthCardVo.setProfession(hpCardholder.getProfession());
				healthCardVo.setMaritalStatus(hpCardholder.getMaritalStatus());

				//保存电子健康卡用卡记录
				HpYkjlXnk hpYkjlXnk=new HpYkjlXnk();
				hpYkjlXnk.seteHealthCardId(healthCardId);
				hpYkjlXnk.setMedstepCode(medstepCode);
				hpYkjlXnk.setTerminalCode(terminalCode);
				hpYkjlXnk.setChannelCode(channelCode);
				hpYkjlXnk.setUseTime(new Date());
				hpYkjlXnkService.addYkjlXnk(hpYkjlXnk);
			}else{
				logger.info("省卡管验证电子健康卡二维码");
				//省卡管验证电子健康卡二维码
				Map<String, Object> content = new HashMap<>();
				content.put("ehealth_code", qrCode);//二维码数据内容
				content.put("medstepcode", medstepCode);//诊疗环节代码
				content.put("terminalcode", terminalCode);//扫码枪终端标识号
				content.put("channelcode", channelCode);//刷卡终端类型编号
				ProRequest proRequest = new ProRequest();
				proRequest.setApp_id(appId);//应用编号
				proRequest.setMethod("ehc.ehealthcode.verify");//验证电子健康卡二维码接口名称
				proRequest.setBiz_content(JSONObject.toJSONString(content));//请求参数集合
				ProResponse proResponse = proCardService.process(proRequest,appSecret);//发送请求

				//请求失败
				if(!"10".equals(proResponse.getCode())){  //10成功   00失败
					throw new BusException(proResponse.getMessage());
				}
				//封装响应参数
				JSONObject jsonObject = JSONObject.parseObject(proResponse.getBiz_content());
				healthCardVo.setHealthCardId(jsonObject.getString("ehealth_card_id"));
				healthCardVo.setMindexId(jsonObject.getString("mindex_id"));
				healthCardVo.setDocuType(jsonObject.getString("id_type"));
				healthCardVo.setDocuId(jsonObject.getString("id_no"));
				healthCardVo.setName(jsonObject.getString("name"));
				healthCardVo.setSex(jsonObject.getString("gender"));
				healthCardVo.setNation(jsonObject.getString("nation"));
				healthCardVo.setNationality(jsonObject.getString("nation"));
				healthCardVo.setAddress(jsonObject.getString("domicile"));
				Date birth=DateUtils.parseDate(jsonObject.getString("birthday"));
				healthCardVo.setBirth(birth);
				healthCardVo.setPhone(jsonObject.getString("cellphone"));
				healthCardVo.setTel(jsonObject.getString("telephone"));
				healthCardVo.setAddress2(jsonObject.getString("address"));
				healthCardVo.setProfession(jsonObject.getString("workcode"));
				healthCardVo.setMaritalStatus(jsonObject.getString("maritalstatus"));
			}
			return healthCardVo;
		}catch(Exception e){
			throw new BusException("服务异常!");
		}

	}
}
