package com.healthpay.iface;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.MethodUtils;
import org.apache.commons.lang3.reflect.FieldUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.healthpay.common.annotation.NotNull;
import com.healthpay.common.exception.BusException;
import com.healthpay.common.utils.DbUtil;
import com.healthpay.common.utils.StringUtils;
import com.healthpay.common.web.BaseController;
import com.healthpay.iface.service.IEHCHandler;
import com.healthpay.iface.util.IBaseModel;
import com.healthpay.iface.vo.HeaderVo;
import com.healthpay.modules.iface.entity.HpIfaceLog;
import com.healthpay.modules.iface.entity.HpIfaceMerchant;
import com.healthpay.modules.iface.service.HpIfaceLogService;
import com.healthpay.modules.iface.service.HpIfaceMerchantService;

@Controller
@RequestMapping(value = "${adminPath}/http")
public class CardBusinessController extends BaseController {
	@Autowired
	private HpIfaceMerchantService hpIfaceMerchantService;
	@Autowired
	private HpIfaceLogService hpIfaceLogService;
	@Autowired
	private Map<String, IEHCHandler> handlerMap;
	
	/**
	 * 统一对外接口
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @author yyl
	 * @date 2016年5月31日 上午10:11:37
	 */
	@ResponseBody
	@RequestMapping(value = "doHealth")
	public String doHealth(HttpServletRequest request, HttpServletResponse response) {
		return execute(request, response);
	}

	/**
	 * 业务操作入口
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @author mabaoying
	 * @date 2019年7月30日
	 */
	private String execute(HttpServletRequest request, HttpServletResponse response) {
		String retcode = "0000";
		String errmsg = "";
		String appId = "";
		String funcid = "";
		String retData = null;
		Object backSdata = null;
		HeaderVo retVo = new HeaderVo();
		String xml = request.getParameter("xml");
		String sign = request.getParameter("sign");
		String method = request.getMethod();

		try {
			if(!"POST".equals(method)){
				throw new BusException("请采用POST方式提交");
			}

			if(StringUtils.isEmpty(xml)) {
				throw new BusException("xml数据域不能为空");
			}

			if(StringUtils.isEmpty(sign)) {
				throw new BusException("sign数据域不能为空");
			}

			HeaderVo headerVo = new HeaderVo();
			//xml封装bean
			IBaseModel.loadXml2Bean(headerVo,xml,"Head");
			appId = headerVo.getMerid();
			//功能码
			funcid = headerVo.getFuncid();


			// 验证头有效性
			String appSecret=this.isCheck(headerVo,xml,sign);
			
			//根据功能码获取具体服务处理器
			IEHCHandler handler = handlerMap.get(funcid.toLowerCase());
			if (handler == null) {
				throw new BusException("错误的功能编码");
			}
			
			//调用具体业务处理器处理业务
			backSdata = handler.RHCMessageServer(appId,appSecret,xml,request.getServletContext().getRealPath("/"));
		} catch (BusException e){
			logger.error(e.getMessage(), e);
			errmsg = e.getMessage();
			retcode = "9999";
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			errmsg = e.getMessage();
			retcode = "9999";
		}
		
		// 返回消息
		retVo.setRetCode(retcode);
		retVo.setErrmsg(errmsg);
		retVo.setTimer(String.valueOf(System.currentTimeMillis()));// 暂时先这样吧

		try {
			//bean转xml
			retData = IBaseModel.parseBean2Xml(retVo,backSdata);
			logger.info("调用返回结果======"+retData);
		} catch (Exception e) {
			errmsg = "服务异常";
			retcode = "9999";
		}

		//记录日志
		HpIfaceLog hpIfaceLog = new HpIfaceLog();
		hpIfaceLog.setCreateTime(DbUtil.getDate());
		hpIfaceLog.setMerId(appId);
		hpIfaceLog.setFuncId(funcid);
		hpIfaceLog.setSenddata(xml);
		hpIfaceLog.setRetcode(retcode);
		hpIfaceLog.setErrmsg(errmsg);
		hpIfaceLog.setRetdata(retData);
		hpIfaceLog.setIsNewRecord(true);
		hpIfaceLogService.save(hpIfaceLog);
		
		return retData;
	}
	
	/**
	 * 验证数据有效性
	 * @param headerVo
	 * @param xml
	 * @param sign    返回数字功能证书编码app_secret
	 * @author yyl
	 * @date 2016年6月1日 下午12:25:55
	 */
	private String isCheck(HeaderVo headerVo,String xml,String sign) {
		if (null == headerVo) {
			throw new BusException("无效数据");
		}
		// 非空校验
		if (StringUtils.isNull(headerVo.getMerid())) {
			throw new BusException("商户号为空");
		}
		if (StringUtils.isNull(headerVo.getFuncid())) {
			throw new BusException("功能码为空");
		}
		if (StringUtils.isNull(sign)) {
			throw new BusException("验签码为空");
		}
		if (StringUtils.isNull(headerVo.getTimer())) {
			throw new BusException("时间戳为空");
		}
		// 验证商户号
		// 验证商户号是否合法
		HpIfaceMerchant hpIfaceMerchant = hpIfaceMerchantService.getFormCache(headerVo.getMerid());
		if (null == hpIfaceMerchant) {
			throw new BusException("商户号错误");
		}
		if (null != hpIfaceMerchant.getStatus() && "0".equals(hpIfaceMerchant.getStatus())) {
			throw new BusException("商户已停用");
		}
		// 时间戳验证
		long curTime = System.currentTimeMillis();
		long sendTime = Long.valueOf(headerVo.getTimer());
		if ((curTime - sendTime) > 300000) {
			throw new BusException("时间戳有误，时间戳误差不能大于5分钟");
		}
		// 验签码验证
		String curSign = StringUtils.getMD5Code(hpIfaceMerchant.getDigitalKey() + headerVo.getFuncid() + headerVo.getTimer()
				+ xml);
		logger.error("原文为:"+ hpIfaceMerchant.getDigitalKey() + headerVo.getFuncid() + headerVo.getTimer()
				+ xml);
		logger.error("当前Sign为:"+curSign);
		logger.error("接收到的Sign为:"+sign);
		if (!curSign.equalsIgnoreCase(sign)) {
			throw new BusException("验签失败，请检查数据签名码是否正确");
		}
		return hpIfaceMerchant.getDigitalKey();
	}


	// 验证数据非空
	private void isCheckData(Object object) {
		for (Field field : object.getClass().getDeclaredFields()) {
			NotNull notNullCheck = field.getAnnotation(NotNull.class);
			if (notNullCheck != null) {
				try {
					Object val = FieldUtils.readField(field, object, true);
					if (val == null || StringUtils.isBlank(String.valueOf(val))) {
						throw new BusException("字段：["+notNullCheck.name() + "]不能为空");
					}
				} catch (IllegalAccessException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		for (Method method : object.getClass().getDeclaredMethods()) {
			NotNull notNullCheck = method.getAnnotation(NotNull.class);
			if (notNullCheck != null) {
				try {
					String name = method.getName().substring(3);
					String field = name.substring(0, 1).toLowerCase() + name.substring(1);
					// Method m = object.getClass().getDeclaredMethod("get" +
					// name);
					// Object val = m.invoke(object);
					Object val = MethodUtils.invokeMethod(object, "get" + name, null);
					if (val == null || StringUtils.isBlank(String.valueOf(val))) {
						throw new BusException("字段：["+notNullCheck.name() + "]不能为空");
					}
				} catch (IllegalAccessException e) {
					logger.error(e.getMessage(), e);
				} catch (NoSuchMethodException e) {
					logger.error(e.getMessage(), e);
				} catch (SecurityException e) {
					logger.error(e.getMessage(), e);
				} catch (IllegalArgumentException e) {
					logger.error(e.getMessage(), e);
				} catch (InvocationTargetException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
	}

}
